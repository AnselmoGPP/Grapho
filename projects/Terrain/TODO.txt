TODO:
	deleteModel(): problem with models that are still in modelsToLoad
	Am I asking GPU for too large heap space?
	Camera
	Inputs (MVC)
	GUI
	FPS > 30
	Profiling
	learnopengl.com / Simon
	Later: Readme.md
	Later: Multithread loading / Reorganize 2nd thread / Parallel thread manager
	Later: Compute MVP matrix and pass it to the shader

	Scheme pictures
	Computer graphics article
	Read specs & tutorial

	- Axis
	- Sun billboard (transparencies)
	- Terrain
	> Modify NoiseSurface for it to have some state (noiseSet...) and generate buffers outside itself
	Make the renderer a static library
	Add ProcessInput() maybe
	Dynamic states (graphics pipeline)
	Push constants
	Deferred rendering (https://gamedevelopment.tutsplus.com/articles/forward-rendering-vs-deferred-rendering--gamedev-12342)

	UBO of each renders should be stored in a vector-like structure, so there are UBO available for new renders (generated with setRender())
	Destroy Vulkan buffers (UBO) outside semaphores

	TerrainGrid:
	>Planet version
	exception when going too far -> try your own octaves implementation
	Destructor TerrainGrid/Chunks that correctly deletes chunks
	Recicle chunks
	>Remove some non-visible chunks when there are too much of them (saves memory)
	>computeTerrain may cause bottleneck (no second thread loading)

	SphericalChunk:
	>Improve biplanar texture (shader) (and make normals/tangents correctly: Trilinear normal mapping (tangents))
	Grid: Doesn't updates chunks / Texture resolution
	>Bug when closing rendered
	minLevel constructor variable is included? should be
	terrGrid.getloadedChunks(), .getRenderedChunks(), .getTotalNodes() work correctly?
	Hide rootCellSize/cubeSize?

Rendering:
	- Vertex struct has pos, color, text coord. Different vertex structs are required.
	- Points, lines, triangles
	- 2D graphics
	- Transparencies
	- Scene plane: Draw in front of some rendering (used for skybox or weapons)
	Make classes more secure (hide sensitive variables)
	Parallel loading with many threads.
	When passing vertex data directly, should I copy it or pass by reference? Ok, a ref is passed to Renderer, which passes a ref to modelData, which copies data in a vector, and later in a VkBuffer. Could we avoid the copy in a vector?
	> Many renders: Now, UBO is passed many times, so View and Projection matrix are redundant. 
	> update(): Projection matrix should be updated only when it has changed
	> Generalize loadModel() (VertexPCT, etc.) 
	> Can uniforms be destroyed within the UBO class whithout making user responsible for destroying before creating 
	> Check that different operations work (add/remove renders, add/erase model, 0 renders, ... do it with different primitives)
	X VkDrawIndex instanceCount -> check this way of multiple renderings

	- Allow to update MM immediately after addModel() or addRender()
	- Only dynamic UBOs
	- Start thread since run() (objectAlreadyConstructed)
	- Improve modelData object destruction (call stuff from destructor, and take code out from Renderer)
	Can we take stuff out from thread 2?
	Optimization: Parallel commandBuffer creation (2 or more commandBuffers exist)
	model&commandBuffer mutex, think about it
	Usar numMM o MM.size()?
	Profiling
	Skybox borders (could be fixed with VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT)

Useless/Complicated:
	Pass material to Fragment Shader
	Skybox shouldn't require transformation matrices? Just rotating
	TerrainGrid: Use int instead of floats for map key?
	TerrainGrid: Update CB only if new chuncks are required (not only when camera doesn't move)

Abstract:
	> Textures set (share textures)
	> Descriptor set

Model & Data system:
	Each ModelData could have: Vertices, Color buffers, textures, texture coords, Indices, UBO class, shaders, vertex struct
	Unique elements (always): Vertices, indices, shaders
	Unique elements (sometimes): Color buffer, texture coords,
	Shared elements (sometimes): UBO class, Textures, vertex struct(Vertices, color, textCoords)

BUGS:
	Sometimes camera continue moving backwards/left indefinetely.
	Camera jump when starting to move camera.
	When escaping too soon (before planet is rendered), exception happens (elements not already destroyed when calling cleanup)

--------------------------------------------------------------------------

Make Readme.md for knowing how to build the project
Upload to git
Doxygen comments

String variables containing paths
Progresive probability of finding certain stuff
terrain extender beyond limits (big numbers)
gui bar for shininess & specularStrength
Function for normals generation (and more encapsulations?)

LOD > Endless terrain (pixel circle) > Threading > Change resolution depending on distance from the viewer >
> not updating chunks in every frame (make the viewer move some distance before doing it (viewerMoveThresholdForChunckUpdate)) (remember that getting the square distance is faster than actual distance)

Pixel area (border's normals) (different LOD areas joints)

learnopengl

Bug:   NoiseSurface terrX = (worldChunks.chunkDict[k]);     // double free or corruption (!prev)
Class encapsulation of OpenGL functions
ImGui
Light cast
Compute MVP matrices only once
Pass parameters to the shader as uniforms (instead of hard-coding them in the shader)
Single VAO for all chuncks
BENCHMARK terrain generation (single VAO Vs multiple VAO)

terrainChunks:
        (X) Fog
        ( ) Don't show non-visible chunks
        ( ) Low level of detail far away
	( ) When fixing borders normals, don't compute noise again if it can be taken from the chunk next to it
	(X) Rounded area
	(X) Follow the camera
	(X) Don't send again to GPU already sent chunks
	(X) Hay acumulaciÃ³n de chunks creciente al avanzar?? No lo es
	(X) Encapsular terrain rendering
	(X) Ommit first terrain creation

--- Issues ------------------
Vertex data (vertex, color, texture coords, indices) passed directly to a ModelData object. Problem:
If such data is passed by reference, the user has to wait until the data is loaded after fullConstructor().
If it is passed by value, user don't have to worry.

Constructor sets flag dataFromFile and fullyConstructed
fullConstruction uses dataFromFile
User uses fullyConstructed for knowing how long ModelData needs the data visible 
Alternatively, dont include fullyConstructed, but copy data directly

--- Visual code ------------------
Doesn't detect macros declared in CMakeLists.txt
Doesn't have key combination for "save all"

----------------------------------

Doxygen comments (including documenting files)

----------------------------------
----- ERRORS -----
----------------------------------
I modified the glfw library:
glfw3.h   ->   I modified line 210. Instead of:
   #include <GL/gl.h>
I put:
  #if !defined(GLFW_INCLUDE_VULKAN)	// ans
   #include <GL/gl.h>
  #endif							// ans
  
----------
My "Lenovo" says:
hank@hank-Lenovo-Z50-70:~/eclipse-workspace/Vulkan/extern/vulkansdk-linux-x86_64-1.2.170.0/1.2.170.0/samples/_BUILD/Sample-Programs/Hologram$ ./Hologram
INTEL-MESA: warning: Haswell Vulkan support is incomplete
terminate called after throwing an instance of 'std::runtime_error'
  what():  failed to find any capable Vulkan physical device
Aborted (core dumped)
  
----------
